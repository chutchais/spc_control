# -*- coding: utf-8 -*-
# Generated by Django 1.9a1 on 2016-04-25 03:32
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('spc', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='GoldMaster',
            fields=[
                ('sn', models.CharField(max_length=50, primary_key=True, serialize=False, verbose_name='Gold Serial number')),
                ('model', models.CharField(max_length=50, null=True, verbose_name='Model')),
                ('description', models.CharField(max_length=255, null=True)),
                ('datetime', models.DateTimeField(auto_now=True, verbose_name='Created date')),
                ('active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='GoldSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255, null=True)),
                ('datetime', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=False)),
                ('sn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spc.GoldMaster')),
            ],
        ),
        migrations.CreateModel(
            name='OperationMaster',
            fields=[
                ('name', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('group', models.CharField(blank=True, max_length=255, null=True)),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ParamMaster',
            fields=[
                ('param_name', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('spc_required', models.BooleanField()),
                ('unit_name', models.CharField(max_length=10, null=True)),
                ('unit_power', models.SmallIntegerField(default=0)),
                ('group', models.CharField(max_length=20, null=True)),
                ('description', models.CharField(max_length=255, null=True)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ParamSetting',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('model', models.CharField(max_length=50, null=True, verbose_name='Model')),
                ('control_side', models.CharField(choices=[('MIN', 'Min Side'), ('MAX', 'Max Side'), ('BOTH', 'Both Side')], max_length=4, null=True)),
                ('ucl', models.FloatField(default=0.0, verbose_name='Upper line(3s)')),
                ('ucl2s', models.FloatField(default=0.0, verbose_name='Upper line(2s)')),
                ('ucl1s', models.FloatField(default=0.0, verbose_name='Upper line(1s)')),
                ('cl', models.FloatField(default=0.0, verbose_name='Center line')),
                ('lcl1s', models.FloatField(default=0.0, verbose_name='Lower line(1s)')),
                ('lcl2s', models.FloatField(default=0.0, verbose_name='Lower line(2s)')),
                ('lcl', models.FloatField(default=0.0, verbose_name='Lower line(3s)')),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('active', models.BooleanField(default=False)),
                ('param_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spc.ParamMaster')),
            ],
        ),
        migrations.CreateModel(
            name='PerformExecute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('execute_result', models.BooleanField(default=False)),
                ('spc_lower_limit', models.FloatField(blank=True, default=0.0, verbose_name='SPC lower limit')),
                ('spc_upper_limit', models.FloatField(blank=True, default=0.0, verbose_name='SPC Upper limit')),
                ('side', models.CharField(default='MIN', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='PerformingActionLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tester_name', models.CharField(max_length=50, verbose_name='Tester Name')),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('result', models.BooleanField(default=False)),
                ('action_details', models.TextField(blank=True, max_length=255, null=True)),
                ('user_id', models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PerformingDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('param_name', models.CharField(max_length=50)),
                ('result', models.BooleanField()),
                ('lower_limit', models.FloatField(default=0.0, verbose_name='Lower limit')),
                ('upper_limit', models.FloatField(default=0.0, verbose_name='Upper limit')),
                ('unit_name', models.CharField(max_length=10)),
                ('min_value', models.FloatField(default=0.0, verbose_name='Min value')),
                ('max_value', models.FloatField(default=0.0, verbose_name='Max value')),
                ('datetime', models.DateTimeField()),
                ('spc_required', models.BooleanField(default=False)),
                ('spc_result', models.BooleanField(default=False)),
                ('spc_response', models.TextField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PerformingTracking',
            fields=[
                ('perform_id', models.AutoField(primary_key=True, serialize=False)),
                ('sn', models.CharField(max_length=50, verbose_name='DUT serial number')),
                ('model', models.CharField(max_length=20, null=True, verbose_name='DUT model')),
                ('station', models.CharField(blank=True, max_length=20)),
                ('tester_name', models.CharField(max_length=50, verbose_name='Tester Name')),
                ('location', models.CharField(blank=True, max_length=20, null=True)),
                ('ticket', models.CharField(blank=True, max_length=20, null=True)),
                ('datetime', models.DateTimeField()),
                ('type', models.CharField(choices=[('PROD', 'Production'), ('GR&R', 'Gate Repeat and Reproduce'), ('VALIDATE', 'Validation')], max_length=10, null=True)),
                ('user_id', models.CharField(max_length=20, null=True)),
                ('result', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='RuleMaster',
            fields=[
                ('rule_name', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('data_point_count', models.IntegerField(default=1)),
                ('type', models.CharField(choices=[('OUT_OF_LIMIT', 'Out of Limit'), ('TREND', 'Trend of data'), ('POINTINROW', 'Point in Row')], max_length=20, null=True)),
                ('sigma_zone', models.IntegerField(default=3)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='SpcRuleMaster',
            fields=[
                ('rule_name', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('data_point_count', models.IntegerField(default=3)),
                ('sigma_zone', models.IntegerField(default=3)),
                ('out_of_limit', models.BooleanField()),
                ('continuous_mode', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='SpcSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.BooleanField()),
                ('datetime', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField()),
                ('rule_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spc.SpcRuleMaster')),
            ],
        ),
        migrations.CreateModel(
            name='TesterMaster',
            fields=[
                ('tester_name', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('location', models.CharField(blank=True, max_length=20, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('group', models.CharField(blank=True, max_length=255, null=True)),
                ('control', models.BooleanField(default=False)),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='PerformSetting',
            fields=[
                ('tester_name', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='spc.TesterMaster')),
                ('perform_time', models.TimeField(default='00:00')),
                ('interval_time', models.IntegerField(default=24, verbose_name='Repeat Every(hr)')),
                ('last_perform_datetime', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('last_perform_result', models.BooleanField()),
                ('perform_id', models.CharField(blank=True, max_length=50, null=True)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_spc_result', models.BooleanField(default=False)),
                ('require_actions', models.BooleanField(default=False)),
            ],
        ),
        migrations.AddField(
            model_name='spcsetting',
            name='tester_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spc.TesterMaster'),
        ),
        migrations.AddField(
            model_name='performingdetail',
            name='perform_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='perform_set', to='spc.PerformingTracking'),
        ),
        migrations.AddField(
            model_name='performingactionlog',
            name='perform_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions_set', to='spc.PerformingTracking'),
        ),
        migrations.AddField(
            model_name='performexecute',
            name='perform_param',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spc.PerformingDetail'),
        ),
        migrations.AddField(
            model_name='performexecute',
            name='rule_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spc.RuleMaster'),
        ),
        migrations.AddField(
            model_name='paramsetting',
            name='tester_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spc.TesterMaster'),
        ),
        migrations.AddField(
            model_name='parammaster',
            name='testers',
            field=models.ManyToManyField(through='spc.ParamSetting', to='spc.TesterMaster'),
        ),
        migrations.AddField(
            model_name='goldsetting',
            name='tester_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spc.TesterMaster'),
        ),
        migrations.AddField(
            model_name='goldmaster',
            name='testers',
            field=models.ManyToManyField(through='spc.GoldSetting', to='spc.TesterMaster'),
        ),
    ]
